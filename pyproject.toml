[tool.poetry]
name = "menu-automacoes"
version = "1.0.0"
description = "Sistema de automação para Hub XP e processamento de renda fixa"
authors = ["Maikon Silva <maikondp0@gmail.com>"]
readme = "README.md"
packages = [{include = "fastapi"}, {include = "services"}]

[tool.poetry.dependencies]
python = "^3.12,<4.0"
# FastAPI Core
fastapi = {extras = ["standard"], version = "^0.115.13"}
uvicorn = {extras = ["standard"], version = "^0.34.0"}
pydantic = "^2.10.4"

# Database
mysql-connector-python = "^9.3.0"
python-dotenv = "^1.1.0"

# Web Automation
selenium = "^4.33.0"

# Data Processing
pandas = "^2.3.0"
openpyxl = "^3.1.5"

# HTTP Client
requests = "^2.32.4"
httpx = "^0.28.1"

# Utils
python-dateutil = "^2.9.0"
pytz = "^2025.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-asyncio = "^1.0.0"
pytest-mock = "^3.14.1"
ruff = "^0.12.0"
taskipy = "^1.14.1"
pre-commit = "^4.2.0"
bandit = {extras = ["toml"], version = "^1.8.5"}
commitizen = "^4.8.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["fastapi", "services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.taskipy.tasks]
pre_test = "task lint"
test = "pytest"
test-cov = "pytest --cov=fastapi --cov=services --cov-report=html --cov-report=term"
lint = "ruff check ."
pre_format = "ruff check --fix"
format = "ruff format ."
format-check = "ruff format --check ."
lint-fix = "ruff check --fix ."
run_dev = "fastapi dev fastapi/main.py --host 0.0.0.0 --port 8000"
check = "ruff check . && ruff format --check . && pytest"
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"
security = "bandit -c pyproject.toml -r ."

# Configurações do Bandit (segurança)
[tool.bandit]
skips = ["B101", "B601", "B104", "B105", "B404", "B603", "B110", "B112"]
exclude_dirs = ["tests", "htmlcov", "logs"]

# Configurações do Commitizen
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version"
]

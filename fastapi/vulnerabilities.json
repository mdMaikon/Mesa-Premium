{"dependencies": [{"name": "altgraph", "version": "0.17.4", "vulns": []}, {"name": "amqp", "version": "5.3.1", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "3.7.1", "vulns": []}, {"name": "attrs", "version": "23.2.0", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "automat", "version": "22.10.0", "vulns": []}, {"name": "babel", "version": "2.10.3", "vulns": []}, {"name": "bcrypt", "version": "3.2.2", "vulns": []}, {"name": "billiard", "version": "4.2.1", "vulns": []}, {"name": "blinker", "version": "1.7.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "celery", "version": "5.4.0", "vulns": []}, {"name": "certifi", "version": "2025.4.26", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "click", "version": "8.1.6", "vulns": []}, {"name": "click-didyoumean", "version": "0.3.1", "vulns": []}, {"name": "click-plugins", "version": "1.1.1", "vulns": []}, {"name": "click-repl", "version": "0.3.0", "vulns": []}, {"name": "cloud-init", "skip_reason": "Dependency not found on PyPI and could not be audited: cloud-init (25.1.2)"}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "command-not-found", "skip_reason": "Dependency not found on PyPI and could not be audited: command-not-found (0.3)"}, {"name": "configobj", "version": "5.0.8", "vulns": [{"id": "GHSA-c33w-24p9-8m24", "fix_versions": ["5.0.9"], "aliases": ["CVE-2023-26112"], "description": "All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\\((.*)\\). **Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file."}]}, {"name": "constantly", "version": "23.10.4", "vulns": []}, {"name": "cryptography", "version": "41.0.7", "vulns": [{"id": "PYSEC-2024-225", "fix_versions": ["42.0.4"], "aliases": ["CVE-2024-26130"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised."}, {"id": "GHSA-3ww4-gg4f-jr7f", "fix_versions": ["42.0.0"], "aliases": ["CVE-2023-50782"], "description": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data."}, {"id": "GHSA-9v9h-cgj8-h64p", "fix_versions": ["42.0.2"], "aliases": ["CVE-2024-0727"], "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL to crash leading to a potential Denial of Service attack  Impact summary: Applications loading files in the PKCS12 format from untrusted sources might terminate abruptly.  A file in PKCS12 format can contain certificates and keys and may come from an untrusted source. The PKCS12 specification allows certain fields to be NULL, but OpenSSL does not correctly check for this case. This can lead to a NULL pointer dereference that results in OpenSSL crashing. If an application processes PKCS12 files from an untrusted source using the OpenSSL APIs then that application will be vulnerable to this issue.  OpenSSL APIs that are vulnerable to this are: PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes() and PKCS12_newpass().  We have also fixed a similar issue in SMIME_write_PKCS7(). However since this function is related to writing data we do not consider it security significant.  The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."}, {"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}]}, {"name": "customtkinter", "version": "5.2.2", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "darkdetect", "version": "0.8.0", "vulns": []}, {"name": "dbus-python", "version": "1.3.2", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "distro-info", "skip_reason": "Dependency not found on PyPI and could not be audited: distro-info (1.7+build1)"}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "fastapi", "version": "0.104.1", "vulns": [{"id": "PYSEC-2024-38", "fix_versions": ["0.109.1"], "aliases": ["GHSA-qf9m-vfgh-m389", "CVE-2024-24762"], "description": "FastAPI is a web framework for building APIs with Python 3.8+ based on standard Python type hints. When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options. An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests. It's a ReDoS(Regular expression Denial of Service), it only applies to those reading form data, using `python-multipart`. This vulnerability has been patched in version 0.109.1."}]}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httplib2", "version": "0.20.4", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.25.2", "vulns": []}, {"name": "hyperlink", "version": "21.0.0", "vulns": []}, {"name": "idna", "version": "3.6", "vulns": [{"id": "PYSEC-2024-60", "fix_versions": ["3.7"], "aliases": ["CVE-2024-3651"], "description": "A vulnerability was identified in the kjd/idna library, specifically within the `idna.encode()` function, affecting version 3.6. The issue arises from the function's handling of crafted input strings, which can lead to quadratic complexity and consequently, a denial of service condition. This vulnerability is triggered by a crafted input that causes the `idna.encode()` function to process the input with considerable computational load, significantly increasing the processing time in a quadratic manner relative to the input size."}]}, {"name": "incremental", "version": "22.10.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "jinja2", "version": "3.1.2", "vulns": [{"id": "GHSA-h5c8-rqwp-cp95", "fix_versions": ["3.1.3"], "aliases": ["CVE-2024-22195"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."}, {"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "aliases": ["CVE-2024-34064"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "joblib", "version": "1.5.1", "vulns": []}, {"name": "jsonpatch", "version": "1.32", "vulns": []}, {"name": "jsonpointer", "version": "2.0", "vulns": []}, {"name": "jsonschema", "version": "4.10.3", "vulns": []}, {"name": "kombu", "version": "5.5.4", "vulns": []}, {"name": "launchpadlib", "version": "1.11.0", "vulns": []}, {"name": "lazr-restfulclient", "version": "0.14.6", "vulns": []}, {"name": "lazr-uri", "version": "1.0.6", "vulns": []}, {"name": "license-expression", "version": "30.4.2", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "2.1.5", "vulns": []}, {"name": "marshmallow", "version": "4.0.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "mysql-connector-python", "version": "9.3.0", "vulns": []}, {"name": "netifaces", "version": "0.11.0", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "numpy", "version": "2.3.1", "vulns": []}, {"name": "oauthlib", "version": "3.2.2", "vulns": []}, {"name": "outcome", "version": "1.3.0.post0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.1", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandas", "version": "2.3.0", "vulns": []}, {"name": "pillow", "version": "11.2.1", "vulns": []}, {"name": "pip", "version": "24.0", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "psutil", "version": "6.1.1", "vulns": []}, {"name": "py-serializable", "version": "2.0.0", "vulns": []}, {"name": "pyasn1", "version": "0.4.8", "vulns": []}, {"name": "pyasn1-modules", "version": "0.2.8", "vulns": []}, {"name": "pycurl", "version": "7.45.3", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pygments", "version": "2.17.2", "vulns": []}, {"name": "pygobject", "version": "3.48.2", "vulns": []}, {"name": "pyhamcrest", "version": "2.1.0", "vulns": []}, {"name": "pyinstaller", "version": "6.14.1", "vulns": []}, {"name": "pyinstaller-hooks-contrib", "version": "2025.5", "vulns": []}, {"name": "pyjwt", "version": "2.7.0", "vulns": []}, {"name": "pyopenssl", "version": "23.2.0", "vulns": []}, {"name": "pyparsing", "version": "3.1.1", "vulns": []}, {"name": "pyrsistent", "version": "0.20.0", "vulns": []}, {"name": "pyserial", "version": "3.5", "vulns": []}, {"name": "pysocks", "version": "1.7.1", "vulns": []}, {"name": "pytest", "version": "8.4.1", "vulns": []}, {"name": "pytest-asyncio", "version": "1.0.0", "vulns": []}, {"name": "python-apt", "skip_reason": "Dependency not found on PyPI and could not be audited: python-apt (2.7.7+ubuntu4)"}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "pytz", "version": "2024.1", "vulns": []}, {"name": "pyyaml", "version": "6.0.1", "vulns": []}, {"name": "redis", "version": "5.2.1", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}, {"id": "GHSA-9hjg-9r4m-mvj7", "fix_versions": ["2.32.4"], "aliases": ["CVE-2024-47081"], "description": "### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2"}]}, {"name": "rich", "version": "13.7.1", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "safety", "version": "3.5.2", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "selenium", "version": "4.33.0", "vulns": []}, {"name": "service-identity", "version": "24.1.0", "vulns": []}, {"name": "setuptools", "version": "68.1.2", "vulns": [{"id": "PYSEC-2025-49", "fix_versions": ["78.1.1"], "aliases": ["GHSA-5rjg-fvgr-3xxf", "CVE-2025-47273"], "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue."}]}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "starlette", "version": "0.27.0", "vulns": [{"id": "GHSA-f96h-pmfr-66vw", "fix_versions": ["0.40.0"], "aliases": ["CVE-2024-47874"], "description": "### Summary Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette.  ### PoC  ```python from starlette.applications import Starlette from starlette.routing import Route  async def poc(request):     async with request.form():         pass  app = Starlette(routes=[     Route('/', poc, methods=[\"POST\"]), ]) ```  ```sh curl http://localhost:8000 -F 'big=</dev/urandom' ```  ### Impact This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. "}]}, {"name": "systemd-python", "version": "235", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "trio", "version": "0.30.0", "vulns": []}, {"name": "trio-websocket", "version": "0.12.2", "vulns": []}, {"name": "twisted", "version": "24.3.0", "vulns": [{"id": "PYSEC-2024-75", "fix_versions": ["24.7.0rc1"], "aliases": ["CVE-2024-41810", "GHSA-cf56-g6w6-pqq2"], "description": "Twisted is an event-based framework for internet applications, supporting Python 3.6+. The `twisted.web.util.redirectTo` function contains an HTML injection vulnerability. If application code allows an attacker to control the redirect URL this vulnerability may result in Reflected Cross-Site Scripting (XSS) in the redirect response HTML body. This vulnerability is fixed in 24.7.0rc1."}, {"id": "GHSA-c8m8-j448-xjx7", "fix_versions": ["24.7.0rc1"], "aliases": ["CVE-2024-41671"], "description": "### Summary  The HTTP 1.0 and 1.1 server provided by twisted.web could process pipelined HTTP requests out-of-order, possibly resulting in information disclosure.  ### PoC 0. Start a fresh Debian container: ```sh docker run --workdir /repro --rm -it debian:bookworm-slim ``` 1. Install twisted and its dependencies: ```sh apt -y update && apt -y install ncat git python3 python3-pip \\     && git clone --recurse-submodules https://github.com/twisted/twisted \\     && cd twisted \\     && pip3 install --break-system-packages . ``` 2. Run a twisted.web HTTP server that echos received requests' methods. e.g., the following: ```python from twisted.web import server, resource from twisted.internet import reactor  class TheResource(resource.Resource):     isLeaf = True      def render_GET(self, request) -> bytes:         return b\"GET\"      def render_POST(self, request) -> bytes:         return b\"POST\"  site = server.Site(TheResource()) reactor.listenTCP(80, site) reactor.run() ``` 3. Send it a POST request with a chunked message body, pipelined with another POST request, wait a second, then send a GET request on the same connection: ```sh (printf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\nPOST / HTTP/1.1\\r\\nContent-Length: 0\\r\\n\\r\\n'; sleep 1; printf 'GET / HTTP/1.1\\r\\n\\r\\n'; sleep 1) | nc localhost 80 ``` 4. Observe that the responses arrive out of order: ``` HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:41 GMT Content-Length: 5 Content-Type: text/html  POST HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 4 Content-Type: text/html  GET HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 5 Content-Type: text/html  POST ```  ### Impact See [GHSA-xc8x-vp79-p3wm](https://github.com/twisted/twisted/security/advisories/GHSA-xc8x-vp79-p3wm). Further, for instances of twisted.web HTTP servers deployed behind reverse proxies that implement connection pooling, it may be possible for remote attackers to receive responses intended for other clients of the twisted.web server."}]}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "typing-extensions", "version": "4.13.2", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "ubuntu-pro-client", "skip_reason": "Dependency not found on PyPI and could not be audited: ubuntu-pro-client (8001)"}, {"name": "unattended-upgrades", "skip_reason": "Dependency not found on PyPI and could not be audited: unattended-upgrades (0.1)"}, {"name": "urllib3", "version": "2.4.0", "vulns": [{"id": "GHSA-48p4-8xcf-vxj5", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50182"], "description": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "uvicorn", "version": "0.24.0", "vulns": []}, {"name": "uvloop", "version": "0.21.0", "vulns": []}, {"name": "vine", "version": "5.1.0", "vulns": []}, {"name": "wadllib", "version": "1.3.6", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "wheel", "version": "0.42.0", "vulns": []}, {"name": "wsproto", "version": "1.2.0", "vulns": []}, {"name": "zope-interface", "version": "6.1", "vulns": []}], "fixes": []}
